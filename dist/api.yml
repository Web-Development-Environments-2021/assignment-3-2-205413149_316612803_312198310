openapi: 3.0.0
info:
  title: api
  description: API for  project
  version: 1.0.0
tags:
  - name: Users
  - name: Auth
  - name: League
  - name: Players
  - name: Teams
  - name: Matches
  - name: FAR
paths:
  /Register:
    post:
      tags:
        - Auth
      summary: Add new user
      description: A new user from the client is added to the server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: A new user has been added
        "409":
          description: Username taken
  /Login:
    post:
      tags:
        - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginScheme"
      responses:
        "200":
          description: >
            User was found in the DB and authenitcated successfully.
            The session ID is returned in a cookie named `session`. 
            You should include this cookie in subsequent requests
          # headers:
          #   Set-Cookie:
          #     schema:
          #       type: string
          #       example: session=87s97sdhgf279293f8w0e9
            # Note that the Set-Cookie header and securitySchemes are not connected in any way, and the Set-Header definition is for documentation purposes only.
        "401":
          description: Username or Password incorrect
        "400":
          description: Bad Request. Wrong Input Parameters
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /league/getLeagueDetails:
    get:
      tags:
        - League
      summary: Return the details about the current league
      responses:
        "200":
          description: data about the current league returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/League"
        "400":
          description: wrong input parameters

  /users/favoriteMatches:
    get:
      tags:
        - Users
        - Matches
      summary: Return the favorite matches that were saved by user
      parameters:
      responses:
        "200":
          description: data about the user's favorites matches returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Match"
        "404":
          description: no matches to the specified user
    post:
      summary: save a match in the favorites list of a user. user has to be logged in.
      tags:
        - Users
        - Matches
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                matchId:
                  type: Integer
                  description: match's id which the user saved
                  example: 1
      responses:
        "201":
          description: The match successfully saved as favorite
        "404":
          description: matchId does not exist
        "401":
          description: match already added to user's favorites

  /teams/teamFullDetails/{teamId}:
    get:
      summary: get full deatils about a team. pass teamID to this route after searchTeamByName execution
      description: useful for team page
      tags:
        - Teams
      parameters:
        - in: path
          name: teamId
          description: team's id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: data about the team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "404":
          description: teamId is not exists

  /teams/searchTeamByName/{teamName}:
    get:
      summary: get full deatils about a team by name. for search operations
      description: useful for team page
      tags:
        - Teams
      parameters:
        - in: path
          name: teamName
          description: team's name
          example: AGF
          required: true
          schema:
            type: string
      responses:
        "200":
          description: data about the team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamFromSearch"
        "404":
          description: Bad Request. no such team.

  /players/playerFullDetails/{playerId}:
    get:
      summary: get full deatils about a player
      description: useful for player page
      tags:
        - Players
      parameters:
        - in: path
          name: playerId
          description: player's id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: data about the player
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fullPlayersDetails"
        "403":
          description: playerId is not exists

  /players/searchPlayerByName/{playerName}:
    get:
      summary: get full deatils about a player by name. for search operations
      description: useful for player page
      tags:
        - Players
      parameters:
        - in: path
          name: playerName
          description: player's name
          example: Steven Gerard
          required: true
          schema:
            type: string
      responses:
        "200":
          description: data about the player
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerPreview"
        "404":
          description: playerName is not exists

  /matches/searchMatches:
    get:
      summary: get all the matches conducted in stage 10. for PAST matches only, 
                use /matches/searchMatchEventLog/{matchId} route for extra info.
      description: useful for the match page
      tags:
        - Matches
      responses:
        "200":
          description: data about the Matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Match"

        "500":
          description: Match events not found in the server
    
  /matches/searchMatchEventLog/{matchId}:
    get:
      summary: get all the events in a PAST match only.
              Use this route after extracting match obj from Matches table.
      description: useful for the match page
      tags:
        - Matches
      parameters:
        - in: path
          name: matchId
          description: match's id
          example: 1
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: data about the Match events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventGET"
        "404":
          description: Match does not have an eventLog
        "500":
          description: Match Id not Found Because Of A Server Error
  /far/addMatch:
    post:
      summary: add a match to matches table
      description: useful for the matches assignment algorithm
      tags:
        - Matches
        - FAR
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchPOST"
      responses:
        "200":
          description: Match added successfully
        "500":
          description: user is not in FAR table
        "400":
          description: Bad Request. Wrong Input Parameters
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: ladygaga
        firstname:
          type: string
          description: user's first name
          example: Stefani
        lastname:
          type: string
          description: user's last name
          example: Germanotta
        country:
          type: string
          description: user's country
          example: USA
        password:
          maxLength: 10
          minLength: 5
          type: string
          description:
            password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: lady@56
        email:
          pattern: email
          type: string
          description: user's email
          example: ladygaga@gmail.com
        image-url:
          pattern: URL
          type: string
          description: URL for the user's image
          example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username conatins letters only
          example: ladygaga
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: password conatins at least one number and one special char
          example: lady@56
    League:
      type: object
      properties:
        league_name:
          type: string
          description: league name
          example: Superliga
        current_season_name:
          type: string
          description: current season name
          example: "2020/2021"
        current_stage_name:
          type: string
          description: current stage name
          example: Championship Round
        next_game:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Match"
    PlayerPreview:
      type: object
      properties:
        player_id:
          type: integer
          description: player's id
          example: 14685598
        name:
          type: string
          description: player's name
          example: Daniel Andersen
        image:
          type: string
          description: player's image
          format: URL
          example: https://cdn.sportmonks.com/images/soccer/players/4/191012.png
        position:
          type: integer
          description: player's position in team
          example: 1
        team_name:
          type: string
          description: player's team name
          example: AGF
    fullPlayersDetails:
      type: object
      properties:
        id:
          type: integer
          description: player's id
          example: 50
        name:
          type: string
          description: player's name
          example: Steven Gerrard
        commonname:
          type: string
          description: player's common name
          example: S. Gerrard
        image:
          type: string
          description: player's image
          format: URL
          example: https://cdn.sportmonks.com/images/soccer/players/18/50.png
        position:
          type: integer
          description: player's position in team
          example: 9
        teamname:
          type: string
          description: player's team name
          example: Rangers
        birthdate:
          type: string
          description: player's birthdate
          example: 30/05/1980
        birthcountry:
          type: string
          description: player's country of birth
          example: England
        height:
          type: integer
          description: player's height
          example: 183 cm
        weight:
          type: string
          description: player's weight
          example: 83 kg # may be null
        nationality:
          type: string
          description: player's nationality
          example: England
    Team:
      type: object
      properties:
        id:
          type: integer
          description: teans's id
          example: 2905
        teamName:
          type: string
          description: team name
          example: AGF
        players:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/PlayerPreview"
        matches:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Match"
    TeamFromSearch:
      type: object
      properties:
        id:
          type: integer
          description: teams's id
          example: 2905
        teamName:
          type: string
          description: team name
          example: AGF
        logo_path:
          type: string
          example: https://cdn.sportmonks.com/images//soccer/teams/25/2905.png

    Match:
      type: object
      properties:
        matchId:
          type: integer
          description: match id. no need to supply - when added to DB. added automatically.
          example: 1
        league:
          type: integer
          description: league's id
          example: 271
        season:
          type: string
          description: league's current season
          example: "2017/2018" 
        stage:
          type: integer
          description: stage in which the match occur in
          example: 10
        matchDate:
          type: string
          description: match date 
          example: '2021-01-01'
        matchHour:
          type: string
          description: match hour 
          example: '19:00'
        hostTeam:
          type: string
          description: hosting team
          example: AGF
        guestTeam:
          type: string
          description: guest team
          example: SønderjyskE
        stadium:
          type: string
          description: host staduim
          example: Metropolitano
        refereeId:
          type: integer
          description: referee id
          example: 6
        score:
          type: string
          description: the match result
          example: 0-3

    MatchPOST:
      type: object
      properties:
        league:
          type: integer
          description: league's id 
          example: 271
        season:
          type: string
          description: league's season 
          example: "2017/2018"
        stage:
          type: integer
          description: stage in which the match occur in
          example: 10
        matchDate:
          type: string
          description: match date. in the format YYYY-MM-DD ONLY!.
          example: '2021-01-01'
        matchHour:
          type: string
          description: match hour 
          example: '19:00'
        hostTeam:
          type: string
          description: hosting team
          example: AGF
        guestTeam:
          type: string
          description: guest team
          example: SønderjyskE
        stadium:
          type: string
          description: host staduim
          example: Metropolitano
        refereeId:
          type: integer
          description: referee id
          example: 6
        score:
          type: string
          description: the match result
          example: 0-3

    EventGET:
      type: object
      properties:
        matchId:
          type: integer
          description: match id.
          example: 1
        eventId:
          type: integer
          description: event id. no need to supply - when added to DB. added automatically.
          example: 1
        event_type:
          type: string
          description: event type as enum
          enum: 
            - Goal
            - offSide
            - Fault
            - YellowCard
            - RedCard
            - Injury
            - Sub
        eventDate:
          type: string
          description: event date 
          example: '2021-01-01T00:00:00.000Z'
        eventHour:
          type: string
          description: event hour 
          example: '19:00'
        minuteInGame:
          type: int
          description: minute in game of the event 
          example: 73
        eventDescription:
          type: string
          description: event description 
          example: Goal Adam Armstrong

    EventPost:
      type: object
      properties:
        matchId:
          type: integer
          description: match id.
          example: 1        
        event_type:
          type: string
          description: event type as enum
          enum: 
            - Goal
            - offSide
            - Fault
            - YellowCard
            - RedCard
            - Injury
            - Sub
        eventDate:
          type: string
          description: event date 
          example: '2021-01-01T00:00:00.000Z'
        eventHour:
          type: string
          description: event hour 
          example: '19:00'
        minuteInGame:
          type: int
          description: minute in game of the event 
          example: 73
        eventDescription:
          type: string
          description: event description 
          example: Goal Adam Armstrong